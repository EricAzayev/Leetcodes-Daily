/*In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.
*
*If the town judge exists, then:
*
*The town judge trusts nobody.
*Everybody (except for the town judge) trusts the town judge.
*There is exactly one person that satisfies properties 1 and 2.
*You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.
*
*/Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.


// 53.20 MB, Beats 72.33% of users with Java


import java.util.HashSet;
import java.util.Set;

class Solution {
    public int findJudge(int n, int[][] trust) {

        Set<Integer> mySet = new HashSet<>();
        int toFind = (n * (n + 1))/2;
        for(int[] relation: trust){
            int check = mySet.size();
            mySet.add(relation[0]);
            if(check != mySet.size()){
                toFind -= relation[0];
            }
        }

        for(int[] friend: trust){
            if(friend[1] == toFind){
                mySet.remove(friend[0]);
            }
        }
        if(mySet.size() == 0 && n ==2 && toFind == 3 ) return -1;
        if(mySet.size() != 0) return -1;
        return toFind;
        }
    }
