//Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

//You may assume that each input would have exactly one solution, and you may not use the same element twice.

//You can return the answer in any order.


//Attempt 1 : Failed
public class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++){
           //if((target % 2 == 0 && nums[i] % 2 == 0) || (target % 2 != 0 || target / 2 == nums[i]) || nums[i] < 0){
                for(int j = i + 1; j < nums.length; j++){
                    if(nums[i] + nums[j] == target){return new int[] {i, j};}
                }
        }
        return new int[] {-1,-1};
    }
}
//Attempt 2: Runtime Beats 34% of Users, Memory beats 49% of Users
public class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++){
           //if((target % 2 == 0 && nums[i] % 2 == 0) || (target % 2 != 0 || target / 2 == nums[i]) || nums[i] < 0){
                for(int j = i + 1; j < nums.length; j++){
                    if(nums[i] + nums[j] == target){return new int[] {i, j};}
                }
        }
        return new int[] {-1,-1};
    }
}
//Attempt 3 : Learned Hash Maps/Tables, O(n)  Runtime Beats 98% of solutions, Space Beats 34.23% of sollutions 
import java.util.HashMap;
public class Solution {
    public int[] twoSum(int[] nums, int target) {
     Map<Integer, Integer> complements = new HashMap<>();
     for(int i = 0; i < nums.length; i++){
         //Integer complementIndex = complements.get(nums[i]); //check if complement exists
         if (complements.get(nums[i]) != null){ //if we find a match
             return new int[] {i, complements.get(nums[i])}; //return match
     }  
     complements.put(target - nums[i], i); //adding complements to check 

    }
    return nums;
}
}

